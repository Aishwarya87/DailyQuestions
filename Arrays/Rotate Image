Rotate clockwise by 90 degrees.
Inplace

Step1) Find inplace Transpose of the matrix N X N 
2*5 matrix after transpose -> 5*2 matrix
N*N matrix after transpose -> N*N matrix
--> No need of new matrix
"Rotate around the diagnol" gives transpose; upper triangle swaps with lower triangle; swap i,j with j,i

def transpose(matrix):
  n= len(matrix)
  for i in range(n):
    for j in range(i): # if i=1(secondrow), j in range(1); j will run only once; not for diagnol
      temp=matrix[i][j]
      matrix[i][j]=matrix[j][i]
      matrix[j][i]=temp
      
      #this results in double swapping, to prevent, if we have swapped (i,j), we dont swap (j,i) indexes in the matrix. A''= A
      # Travel only in lower triangle( below the diagnol); j<=i
      
      
Step2) Whats the similarity between the transposed and the resultant matrix?
Every row in reverse; reverse every row
  n = len(matrix)
  for r in range(n):
    left=0
    right=n-1
    while left<right:
      temp=arr[r][left]
      arr[r][left]=arr[r][right]
      arr[r][right]=temp
      left+=1
      right-=1
      
      
      
      
